To create new rails project:
  rails new #{project_name} -G --database=postgresql


Creating and Editing Schema
  1) Build migrations to create tables!
    bundle exec rails generate migration #{TableCreate/Edit/Update}
  Examples: "CreateUsersTable", "CreateCatsTable", "UpdateCats", etc.

  2) Edit migration file (add tables/columns/indexes,etc.). Syntax example:
    def change
      create_table :users do |t|
        t.string :username, null: false
        t.string :password_digest, null: false
        t.string :session_token, null: false
        t.timestamps
      end

      add_index :users, :username, unique: true
      add_index :users, :session_token, unique: true
    end

  3) Migrate with following command
    bundle exec rails db:migrate

Creating Models
  1) In "/app/models/" create new .rb file (Note: filename should be singular)
  Examples: "user.rb", "twist.rb", "cat.rb"

  2) Edit model file with associations and validations. Useful syntax examples:
    validates :username, :session_token, presence: true, uniquness: true
    validates :password_digest, presence: true

  Recall, if the table column is a foreign key, write as belongs_to association as follows:
    belongs_to: #{method name, usually the class that foreign key references}
      primary_key: #{primary key}
      foreign_key: #{this foreign key name}
      class_name: #{class that foreign key references}

  Appropriately, if another class references this table, write a has_many/has_one assosiation as follows:
    has_many: #{method name, usually the class that references this table}
      primary_key: #{primary key}
      foreign_key: #{the foreign key that references this table}
      class_name: #{class that contains the foreign key}

  3) Create any necessary methods.
  Example of our complete User model class (for auth purposes):

    class User < ApplicationRecord
      validates :username, :session_token, presence: true, uniqueness: true
      validates :password_digest, presence: true
      validates :password, length: { minimum: 6 }, allow_nil: true

      attr_reader :password

      after_initialize :ensure_session_token

      def password=(password)
        @password = password
        self.password_digest = BCrypt::Password.create(password)
      end

      def is_password?(password)
        bcrypt_pw_object = BCrypt::Password.new(self.password_digest)
        bcrypt_pw_object.is_password?(password)
      end

      def reset_session_token!
        self.session_token = SecureRandom.urlsafe_base64(16)
        self.save!
        self.session_token
      end

      private
      def ensure_session_token
        self.session_token ||= SecureRandom.urlsafe_base64(16)
      end

  4) Before testing, do not forget:
    bundle exec rails db:setup

Creating Controllers
  1) Edit "/config/routes.rb".  Examples:
    resources :cats, except: destroy
    resources :cat_rental_requests: only: [:new, :create]
    ******resource :session, only: [:new, :create, :destroy]
    ******resources :users, only: [:new, :create]
  Note: for more details, look up nesting routes
